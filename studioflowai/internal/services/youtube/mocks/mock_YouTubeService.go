// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package youtube

import (
	"context"

	"github.com/gnzdotmx/studioflowai/studioflowai/internal/services/youtube"
	"github.com/gnzdotmx/studioflowai/studioflowai/internal/utils"
	mock "github.com/stretchr/testify/mock"
	youtube0 "google.golang.org/api/youtube/v3"
)

// NewMockYouTubeService creates a new instance of MockYouTubeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockYouTubeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockYouTubeService {
	mock := &MockYouTubeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockYouTubeService is an autogenerated mock type for the YouTubeService type
type MockYouTubeService struct {
	mock.Mock
}

type MockYouTubeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYouTubeService) EXPECT() *MockYouTubeService_Expecter {
	return &MockYouTubeService_Expecter{mock: &_m.Mock}
}

// FindAvailability provides a mock function for the type MockYouTubeService
func (_mock *MockYouTubeService) FindAvailability(scheduledVideos []youtube.ScheduledVideo, shortsData *utils.ShortsData, periodicity int, scheduleTime string, maxAttempts int, startDate string, playlistID string) ([]youtube.VideoUpload, error) {
	ret := _mock.Called(scheduledVideos, shortsData, periodicity, scheduleTime, maxAttempts, startDate, playlistID)

	if len(ret) == 0 {
		panic("no return value specified for FindAvailability")
	}

	var r0 []youtube.VideoUpload
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]youtube.ScheduledVideo, *utils.ShortsData, int, string, int, string, string) ([]youtube.VideoUpload, error)); ok {
		return returnFunc(scheduledVideos, shortsData, periodicity, scheduleTime, maxAttempts, startDate, playlistID)
	}
	if returnFunc, ok := ret.Get(0).(func([]youtube.ScheduledVideo, *utils.ShortsData, int, string, int, string, string) []youtube.VideoUpload); ok {
		r0 = returnFunc(scheduledVideos, shortsData, periodicity, scheduleTime, maxAttempts, startDate, playlistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]youtube.VideoUpload)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]youtube.ScheduledVideo, *utils.ShortsData, int, string, int, string, string) error); ok {
		r1 = returnFunc(scheduledVideos, shortsData, periodicity, scheduleTime, maxAttempts, startDate, playlistID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockYouTubeService_FindAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAvailability'
type MockYouTubeService_FindAvailability_Call struct {
	*mock.Call
}

// FindAvailability is a helper method to define mock.On call
//   - scheduledVideos []youtube.ScheduledVideo
//   - shortsData *utils.ShortsData
//   - periodicity int
//   - scheduleTime string
//   - maxAttempts int
//   - startDate string
//   - playlistID string
func (_e *MockYouTubeService_Expecter) FindAvailability(scheduledVideos interface{}, shortsData interface{}, periodicity interface{}, scheduleTime interface{}, maxAttempts interface{}, startDate interface{}, playlistID interface{}) *MockYouTubeService_FindAvailability_Call {
	return &MockYouTubeService_FindAvailability_Call{Call: _e.mock.On("FindAvailability", scheduledVideos, shortsData, periodicity, scheduleTime, maxAttempts, startDate, playlistID)}
}

func (_c *MockYouTubeService_FindAvailability_Call) Run(run func(scheduledVideos []youtube.ScheduledVideo, shortsData *utils.ShortsData, periodicity int, scheduleTime string, maxAttempts int, startDate string, playlistID string)) *MockYouTubeService_FindAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []youtube.ScheduledVideo
		if args[0] != nil {
			arg0 = args[0].([]youtube.ScheduledVideo)
		}
		var arg1 *utils.ShortsData
		if args[1] != nil {
			arg1 = args[1].(*utils.ShortsData)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockYouTubeService_FindAvailability_Call) Return(videoUploads []youtube.VideoUpload, err error) *MockYouTubeService_FindAvailability_Call {
	_c.Call.Return(videoUploads, err)
	return _c
}

func (_c *MockYouTubeService_FindAvailability_Call) RunAndReturn(run func(scheduledVideos []youtube.ScheduledVideo, shortsData *utils.ShortsData, periodicity int, scheduleTime string, maxAttempts int, startDate string, playlistID string) ([]youtube.VideoUpload, error)) *MockYouTubeService_FindAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// GetVideoDetails provides a mock function for the type MockYouTubeService
func (_mock *MockYouTubeService) GetVideoDetails(ctx context.Context, service *youtube0.Service, videoID string) (*youtube0.Video, error) {
	ret := _mock.Called(ctx, service, videoID)

	if len(ret) == 0 {
		panic("no return value specified for GetVideoDetails")
	}

	var r0 *youtube0.Video
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *youtube0.Service, string) (*youtube0.Video, error)); ok {
		return returnFunc(ctx, service, videoID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *youtube0.Service, string) *youtube0.Video); ok {
		r0 = returnFunc(ctx, service, videoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*youtube0.Video)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *youtube0.Service, string) error); ok {
		r1 = returnFunc(ctx, service, videoID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockYouTubeService_GetVideoDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVideoDetails'
type MockYouTubeService_GetVideoDetails_Call struct {
	*mock.Call
}

// GetVideoDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - service *youtube0.Service
//   - videoID string
func (_e *MockYouTubeService_Expecter) GetVideoDetails(ctx interface{}, service interface{}, videoID interface{}) *MockYouTubeService_GetVideoDetails_Call {
	return &MockYouTubeService_GetVideoDetails_Call{Call: _e.mock.On("GetVideoDetails", ctx, service, videoID)}
}

func (_c *MockYouTubeService_GetVideoDetails_Call) Run(run func(ctx context.Context, service *youtube0.Service, videoID string)) *MockYouTubeService_GetVideoDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *youtube0.Service
		if args[1] != nil {
			arg1 = args[1].(*youtube0.Service)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockYouTubeService_GetVideoDetails_Call) Return(video *youtube0.Video, err error) *MockYouTubeService_GetVideoDetails_Call {
	_c.Call.Return(video, err)
	return _c
}

func (_c *MockYouTubeService_GetVideoDetails_Call) RunAndReturn(run func(ctx context.Context, service *youtube0.Service, videoID string) (*youtube0.Video, error)) *MockYouTubeService_GetVideoDetails_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeYouTubeService provides a mock function for the type MockYouTubeService
func (_mock *MockYouTubeService) InitializeYouTubeService(ctx context.Context, credentialsPath string) (*youtube0.Service, error) {
	ret := _mock.Called(ctx, credentialsPath)

	if len(ret) == 0 {
		panic("no return value specified for InitializeYouTubeService")
	}

	var r0 *youtube0.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*youtube0.Service, error)); ok {
		return returnFunc(ctx, credentialsPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *youtube0.Service); ok {
		r0 = returnFunc(ctx, credentialsPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*youtube0.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, credentialsPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockYouTubeService_InitializeYouTubeService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeYouTubeService'
type MockYouTubeService_InitializeYouTubeService_Call struct {
	*mock.Call
}

// InitializeYouTubeService is a helper method to define mock.On call
//   - ctx context.Context
//   - credentialsPath string
func (_e *MockYouTubeService_Expecter) InitializeYouTubeService(ctx interface{}, credentialsPath interface{}) *MockYouTubeService_InitializeYouTubeService_Call {
	return &MockYouTubeService_InitializeYouTubeService_Call{Call: _e.mock.On("InitializeYouTubeService", ctx, credentialsPath)}
}

func (_c *MockYouTubeService_InitializeYouTubeService_Call) Run(run func(ctx context.Context, credentialsPath string)) *MockYouTubeService_InitializeYouTubeService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockYouTubeService_InitializeYouTubeService_Call) Return(service *youtube0.Service, err error) *MockYouTubeService_InitializeYouTubeService_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockYouTubeService_InitializeYouTubeService_Call) RunAndReturn(run func(ctx context.Context, credentialsPath string) (*youtube0.Service, error)) *MockYouTubeService_InitializeYouTubeService_Call {
	_c.Call.Return(run)
	return _c
}

// ListAvailableTimes provides a mock function for the type MockYouTubeService
func (_mock *MockYouTubeService) ListAvailableTimes(videoUploads []youtube.VideoUpload) error {
	ret := _mock.Called(videoUploads)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableTimes")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]youtube.VideoUpload) error); ok {
		r0 = returnFunc(videoUploads)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockYouTubeService_ListAvailableTimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAvailableTimes'
type MockYouTubeService_ListAvailableTimes_Call struct {
	*mock.Call
}

// ListAvailableTimes is a helper method to define mock.On call
//   - videoUploads []youtube.VideoUpload
func (_e *MockYouTubeService_Expecter) ListAvailableTimes(videoUploads interface{}) *MockYouTubeService_ListAvailableTimes_Call {
	return &MockYouTubeService_ListAvailableTimes_Call{Call: _e.mock.On("ListAvailableTimes", videoUploads)}
}

func (_c *MockYouTubeService_ListAvailableTimes_Call) Run(run func(videoUploads []youtube.VideoUpload)) *MockYouTubeService_ListAvailableTimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []youtube.VideoUpload
		if args[0] != nil {
			arg0 = args[0].([]youtube.VideoUpload)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockYouTubeService_ListAvailableTimes_Call) Return(err error) *MockYouTubeService_ListAvailableTimes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockYouTubeService_ListAvailableTimes_Call) RunAndReturn(run func(videoUploads []youtube.VideoUpload) error) *MockYouTubeService_ListAvailableTimes_Call {
	_c.Call.Return(run)
	return _c
}

// ListScheduledVideos provides a mock function for the type MockYouTubeService
func (_mock *MockYouTubeService) ListScheduledVideos(videos []youtube.ScheduledVideo) error {
	ret := _mock.Called(videos)

	if len(ret) == 0 {
		panic("no return value specified for ListScheduledVideos")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]youtube.ScheduledVideo) error); ok {
		r0 = returnFunc(videos)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockYouTubeService_ListScheduledVideos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListScheduledVideos'
type MockYouTubeService_ListScheduledVideos_Call struct {
	*mock.Call
}

// ListScheduledVideos is a helper method to define mock.On call
//   - videos []youtube.ScheduledVideo
func (_e *MockYouTubeService_Expecter) ListScheduledVideos(videos interface{}) *MockYouTubeService_ListScheduledVideos_Call {
	return &MockYouTubeService_ListScheduledVideos_Call{Call: _e.mock.On("ListScheduledVideos", videos)}
}

func (_c *MockYouTubeService_ListScheduledVideos_Call) Run(run func(videos []youtube.ScheduledVideo)) *MockYouTubeService_ListScheduledVideos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []youtube.ScheduledVideo
		if args[0] != nil {
			arg0 = args[0].([]youtube.ScheduledVideo)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockYouTubeService_ListScheduledVideos_Call) Return(err error) *MockYouTubeService_ListScheduledVideos_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockYouTubeService_ListScheduledVideos_Call) RunAndReturn(run func(videos []youtube.ScheduledVideo) error) *MockYouTubeService_ListScheduledVideos_Call {
	_c.Call.Return(run)
	return _c
}

// ReadScheduledVideos provides a mock function for the type MockYouTubeService
func (_mock *MockYouTubeService) ReadScheduledVideos(ctx context.Context, service *youtube0.Service) ([]youtube.ScheduledVideo, error) {
	ret := _mock.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for ReadScheduledVideos")
	}

	var r0 []youtube.ScheduledVideo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *youtube0.Service) ([]youtube.ScheduledVideo, error)); ok {
		return returnFunc(ctx, service)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *youtube0.Service) []youtube.ScheduledVideo); ok {
		r0 = returnFunc(ctx, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]youtube.ScheduledVideo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *youtube0.Service) error); ok {
		r1 = returnFunc(ctx, service)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockYouTubeService_ReadScheduledVideos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadScheduledVideos'
type MockYouTubeService_ReadScheduledVideos_Call struct {
	*mock.Call
}

// ReadScheduledVideos is a helper method to define mock.On call
//   - ctx context.Context
//   - service *youtube0.Service
func (_e *MockYouTubeService_Expecter) ReadScheduledVideos(ctx interface{}, service interface{}) *MockYouTubeService_ReadScheduledVideos_Call {
	return &MockYouTubeService_ReadScheduledVideos_Call{Call: _e.mock.On("ReadScheduledVideos", ctx, service)}
}

func (_c *MockYouTubeService_ReadScheduledVideos_Call) Run(run func(ctx context.Context, service *youtube0.Service)) *MockYouTubeService_ReadScheduledVideos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *youtube0.Service
		if args[1] != nil {
			arg1 = args[1].(*youtube0.Service)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockYouTubeService_ReadScheduledVideos_Call) Return(scheduledVideos []youtube.ScheduledVideo, err error) *MockYouTubeService_ReadScheduledVideos_Call {
	_c.Call.Return(scheduledVideos, err)
	return _c
}

func (_c *MockYouTubeService_ReadScheduledVideos_Call) RunAndReturn(run func(ctx context.Context, service *youtube0.Service) ([]youtube.ScheduledVideo, error)) *MockYouTubeService_ReadScheduledVideos_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVideo provides a mock function for the type MockYouTubeService
func (_mock *MockYouTubeService) UploadVideo(ctx context.Context, service *youtube0.Service, videoUploads []youtube.VideoUpload, privacyStatus string, categoryID string, storedShortsPath string) error {
	ret := _mock.Called(ctx, service, videoUploads, privacyStatus, categoryID, storedShortsPath)

	if len(ret) == 0 {
		panic("no return value specified for UploadVideo")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *youtube0.Service, []youtube.VideoUpload, string, string, string) error); ok {
		r0 = returnFunc(ctx, service, videoUploads, privacyStatus, categoryID, storedShortsPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockYouTubeService_UploadVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVideo'
type MockYouTubeService_UploadVideo_Call struct {
	*mock.Call
}

// UploadVideo is a helper method to define mock.On call
//   - ctx context.Context
//   - service *youtube0.Service
//   - videoUploads []youtube.VideoUpload
//   - privacyStatus string
//   - categoryID string
//   - storedShortsPath string
func (_e *MockYouTubeService_Expecter) UploadVideo(ctx interface{}, service interface{}, videoUploads interface{}, privacyStatus interface{}, categoryID interface{}, storedShortsPath interface{}) *MockYouTubeService_UploadVideo_Call {
	return &MockYouTubeService_UploadVideo_Call{Call: _e.mock.On("UploadVideo", ctx, service, videoUploads, privacyStatus, categoryID, storedShortsPath)}
}

func (_c *MockYouTubeService_UploadVideo_Call) Run(run func(ctx context.Context, service *youtube0.Service, videoUploads []youtube.VideoUpload, privacyStatus string, categoryID string, storedShortsPath string)) *MockYouTubeService_UploadVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *youtube0.Service
		if args[1] != nil {
			arg1 = args[1].(*youtube0.Service)
		}
		var arg2 []youtube.VideoUpload
		if args[2] != nil {
			arg2 = args[2].([]youtube.VideoUpload)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockYouTubeService_UploadVideo_Call) Return(err error) *MockYouTubeService_UploadVideo_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockYouTubeService_UploadVideo_Call) RunAndReturn(run func(ctx context.Context, service *youtube0.Service, videoUploads []youtube.VideoUpload, privacyStatus string, categoryID string, storedShortsPath string) error) *MockYouTubeService_UploadVideo_Call {
	_c.Call.Return(run)
	return _c
}
