// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package tiktok

import (
	"context"
	"time"

	"github.com/gnzdotmx/studioflowai/studioflowai/internal/services/tiktok"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetAccessToken provides a mock function for the type MockService
func (_mock *MockService) GetAccessToken() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccessToken")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_GetAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessToken'
type MockService_GetAccessToken_Call struct {
	*mock.Call
}

// GetAccessToken is a helper method to define mock.On call
func (_e *MockService_Expecter) GetAccessToken() *MockService_GetAccessToken_Call {
	return &MockService_GetAccessToken_Call{Call: _e.mock.On("GetAccessToken")}
}

func (_c *MockService_GetAccessToken_Call) Run(run func()) *MockService_GetAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetAccessToken_Call) Return(s string) *MockService_GetAccessToken_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_GetAccessToken_Call) RunAndReturn(run func() string) *MockService_GetAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUploadedVideos provides a mock function for the type MockService
func (_mock *MockService) GetUploadedVideos(ctx context.Context) ([]tiktok.VideoInfo, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUploadedVideos")
	}

	var r0 []tiktok.VideoInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]tiktok.VideoInfo, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []tiktok.VideoInfo); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tiktok.VideoInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetUploadedVideos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUploadedVideos'
type MockService_GetUploadedVideos_Call struct {
	*mock.Call
}

// GetUploadedVideos is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetUploadedVideos(ctx interface{}) *MockService_GetUploadedVideos_Call {
	return &MockService_GetUploadedVideos_Call{Call: _e.mock.On("GetUploadedVideos", ctx)}
}

func (_c *MockService_GetUploadedVideos_Call) Run(run func(ctx context.Context)) *MockService_GetUploadedVideos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetUploadedVideos_Call) Return(videoInfos []tiktok.VideoInfo, err error) *MockService_GetUploadedVideos_Call {
	_c.Call.Return(videoInfos, err)
	return _c
}

func (_c *MockService_GetUploadedVideos_Call) RunAndReturn(run func(ctx context.Context) ([]tiktok.VideoInfo, error)) *MockService_GetUploadedVideos_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MockService
func (_mock *MockService) Initialize(config interface{}) error {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockService_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - config interface{}
func (_e *MockService_Expecter) Initialize(config interface{}) *MockService_Initialize_Call {
	return &MockService_Initialize_Call{Call: _e.mock.On("Initialize", config)}
}

func (_c *MockService_Initialize_Call) Run(run func(config interface{})) *MockService_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_Initialize_Call) Return(err error) *MockService_Initialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Initialize_Call) RunAndReturn(run func(config interface{}) error) *MockService_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVideo provides a mock function for the type MockService
func (_mock *MockService) UploadVideo(ctx context.Context, videoPath string, title string, description string, privacy string, publishTime time.Time) error {
	ret := _mock.Called(ctx, videoPath, title, description, privacy, publishTime)

	if len(ret) == 0 {
		panic("no return value specified for UploadVideo")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, time.Time) error); ok {
		r0 = returnFunc(ctx, videoPath, title, description, privacy, publishTime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_UploadVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVideo'
type MockService_UploadVideo_Call struct {
	*mock.Call
}

// UploadVideo is a helper method to define mock.On call
//   - ctx context.Context
//   - videoPath string
//   - title string
//   - description string
//   - privacy string
//   - publishTime time.Time
func (_e *MockService_Expecter) UploadVideo(ctx interface{}, videoPath interface{}, title interface{}, description interface{}, privacy interface{}, publishTime interface{}) *MockService_UploadVideo_Call {
	return &MockService_UploadVideo_Call{Call: _e.mock.On("UploadVideo", ctx, videoPath, title, description, privacy, publishTime)}
}

func (_c *MockService_UploadVideo_Call) Run(run func(ctx context.Context, videoPath string, title string, description string, privacy string, publishTime time.Time)) *MockService_UploadVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 time.Time
		if args[5] != nil {
			arg5 = args[5].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockService_UploadVideo_Call) Return(err error) *MockService_UploadVideo_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_UploadVideo_Call) RunAndReturn(run func(ctx context.Context, videoPath string, title string, description string, privacy string, publishTime time.Time) error) *MockService_UploadVideo_Call {
	_c.Call.Return(run)
	return _c
}
